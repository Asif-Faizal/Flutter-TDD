// Mocks generated by Mockito 5.4.5 from annotations
// in tdd_clean/test/features/news/presentation/home_screen_ui_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:tdd_clean/features/news/bloc/news_bloc.dart' as _i4;
import 'package:tdd_clean/features/news/domain/get_country_news.dart' as _i3;
import 'package:tdd_clean/features/news/domain/get_query_news.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetQueryNews_0 extends _i1.SmartFake implements _i2.GetQueryNews {
  _FakeGetQueryNews_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetCountryNews_1 extends _i1.SmartFake
    implements _i3.GetCountryNews {
  _FakeGetCountryNews_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NewsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsBloc extends _i1.Mock implements _i4.NewsBloc {
  MockNewsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetQueryNews get getQueryNews =>
      (super.noSuchMethod(
            Invocation.getter(#getQueryNews),
            returnValue: _FakeGetQueryNews_0(
              this,
              Invocation.getter(#getQueryNews),
            ),
          )
          as _i2.GetQueryNews);

  @override
  _i3.GetCountryNews get getCountryNews =>
      (super.noSuchMethod(
            Invocation.getter(#getCountryNews),
            returnValue: _FakeGetCountryNews_1(
              this,
              Invocation.getter(#getCountryNews),
            ),
          )
          as _i3.GetCountryNews);

  @override
  String get country =>
      (super.noSuchMethod(
            Invocation.getter(#country),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#country),
            ),
          )
          as String);

  @override
  set country(String? _country) => super.noSuchMethod(
    Invocation.setter(#country, _country),
    returnValueForMissingStub: null,
  );

  @override
  _i4.NewsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i5.dummyValue<_i4.NewsState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.NewsState);

  @override
  _i6.Stream<_i4.NewsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i4.NewsState>.empty(),
          )
          as _i6.Stream<_i4.NewsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i4.NewsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i4.NewsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.NewsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i4.NewsEvent>(
    _i7.EventHandler<E, _i4.NewsState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i7.Transition<_i4.NewsEvent, _i4.NewsState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i4.NewsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
